import groovy.text.SimpleTemplateEngine
import org.kohsuke.github.GitHub

buildscript {
    dependencies {
        classpath 'org.kohsuke:github-api:1.318'
    }
}

plugins {
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'com.gradle.plugin-publish' version '1.2.1'
    id 'com.github.ethankhall.semantic-versioning' version '1.1.0'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'com.github.hierynomus.license' version '0.16.1'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.ajoberstar.git-publish' version '4.2.2'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

project.version.with {
    major = pluginVersionMajor as int
    minor = pluginVersionMinor as int
    patch = pluginVersionPatch as int
    if (project.hasProperty('pluginVersionLabel')) {
        preRelease = pluginVersionLabel
    }
    releaseBuild = pluginReleaseBuild
}
def badassJlinkPluginTag = pluginReleaseBuild ? "v$project.version" : 'master'
group = 'org.beryx'

license {
    header file('license-header.txt')
    skipExistingHeaders true
    ignoreFailures false
    excludes(['**/*.properties', '**/*.txt', '**/hello*/', '**/opens-to-jaxb*/', '**/local-deps*/', '**/multi-launch*/'])
    tasks.license.dependsOn licenseMain, licenseTest
}

configurations {
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.ow2.asm:asm:9.6'

    testImplementation 'org.spockframework:spock-core:2.4-M1-groovy-3.0'

    asciidoctorExt 'com.bmuschko:asciidoctorj-tabbed-code-extension:0.3'
}

test {
    useJUnitPlatform()
}

jar {
    manifest.attributes('Implementation-Title': project.name,
            'Implementation-Version': project.version)
    enabled = false
    dependsOn shadowJar
}

shadowJar {
    archiveClassifier = null
    minimize()
    relocate 'org.objectweb.asm', 'org.beryx.jlink.shadow.asm'
}

gradlePlugin {
    website = vcsUrl = 'https://github.com/beryx/badass-jlink-plugin'
    plugins {
        jlink {
            id = 'org.beryx.jlink'
            implementationClass = 'org.beryx.jlink.JlinkPlugin'
            displayName = 'Badass JLink Plugin'
            description = 'A Gradle plugin that assembles your modules into a custom runtime image'
            tags.set(['jlink', 'jpackage', 'jpms'])
        }
    }
}

asciidoctor {
    configurations 'asciidoctorExt'
    setSourceDir file('doc')
    baseDirFollowsSourceDir()
    sources { include 'index.adoc' }
    logDocuments = true
    attributes 'source-highlighter': 'coderay',
            'coderay-linenums-mode': 'table',
            'project-version': project.version,
            icons: 'font',
            imagesdir: 'img',
            linkattrs: true,
            linkcss: true,
            'git-tag': badassJlinkPluginTag,
            'blob-root': "https://github.com/beryx/badass-jlink-plugin/blob/$badassJlinkPluginTag"
}

gitPublish {
    repoUri = 'https://github.com/beryx/badass-jlink-plugin.git'
    branch = 'gh-pages'

    def pgType = project.hasProperty('ghPageType') ? ghPageType : 'latest'
    if (pgType == 'init') {
        contents.from file('ghpages')
    } else if (pgType == 'list') {
        gitPublishReset.dependsOn('update-release-list')
        contents.from file('build/release-list')
    } else {
        contents.from file(asciidoctor.outputDir.path)
        contents.from file('build/docs')
    }

    def docDir = pluginReleaseBuild ? 'releases' : 'snapshots'
    if (pgType == 'init') {
        contents.into '.'
    } else if (pgType == 'list') {
        contents.into '.'
        preserve {
            include '**'
            exclude 'releases.md'
        }
    } else if (pgType == 'version') {
        gitPublishPush.enabled = (docDir != 'snapshots')
        contents.into "$docDir/$project.version"
        preserve {
            include '**'
            exclude "$docDir/$project.version"
        }
    } else {
        contents.into "$docDir/latest"
        preserve {
            include '**'
            exclude "$docDir/latest"
        }
    }
}

tasks.register('update-release-list') {
    doLast {
        def docBaseUrl = 'http://badass-jlink-plugin.beryx.org'
        def markdown = getReleasesMarkdown(getReleases(), docBaseUrl)
        new File(mkdir('build/release-list'), 'releases.md').write(markdown)
    }
}

static def getReleases() {
    def releases = GitHub.connectAnonymously()
            .getRepository('beryx/badass-jlink-plugin')
            .getDirectoryContent('releases', 'gh-pages')*.name
    releases.removeAll { !it || it == 'latest' }

    releases.sort { o1, o2 ->
        if (!o1) return o2 ? 1 : 0
        if (!o2) return -1
        String[] tokens1 = o1.split('\\.')
        String[] tokens2 = o2.split('\\.')
        int len = Math.min(tokens1.length, tokens2.length)
        for (int i = 0; i < len; i++) {
            int result
            if (tokens2[i].isInteger() && tokens1[i].isInteger()) {
                result = Integer.compare(tokens2[i] as int, tokens1[i] as int)
            } else {
                result = tokens2[i] <=> tokens1[i]
            }
            if (result != 0) return result
        }
        tokens2.length <=> tokens1.length
    }
    return releases
}

static def getReleasesMarkdown(List<String> releases, String docBaseUrl) {
    return new SimpleTemplateEngine().createTemplate('''
            ## List of all releases ##
            
            **Latest snapshot**
            - [documentation]($docBaseUrl/snapshots/latest)
            - [groovydoc]($docBaseUrl/snapshots/latest/groovydoc)
            
            <% releases.each { %>**Release $it**
              - [documentation]($docBaseUrl/releases/$it)
              - [groovydoc]($docBaseUrl/releases/$it/groovydoc)
              
            <% } %>
        '''.stripIndent())
            .make(docBaseUrl: docBaseUrl, releases: releases)
            .toString()
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}
